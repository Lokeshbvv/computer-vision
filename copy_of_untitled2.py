# -*- coding: utf-8 -*-
"""Copy of Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LXQvfqdDvau76VyIpApEAd_5arrWZkgi
"""

from google.colab import files
uploaded = files.upload()

!pip install opencv-python-headless
import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the uploaded image
image = cv2.imread('images.png', cv2.IMREAD_GRAYSCALE)

# 1. Mean Filter (Averaging)
mean_filter = cv2.blur(image, (5, 5))

# 2. Gaussian Filter
gaussian_filter = cv2.GaussianBlur(image, (5, 5), 0)

# 3. Sobel Filter (Gradient)
sobel_x = cv2.Sobel(image, cv2.CV_64F, 1, 0, ksize=3)
sobel_y = cv2.Sobel(image, cv2.CV_64F, 0, 1, ksize=3)
sobel_combined = cv2.addWeighted(sobel_x, 0.5, sobel_y, 0.5, 0)

# 4. Prewitt Filter (Manually Defined)
prewitt_kernel_x = np.array([[ -1, 0, 1], [-1, 0, 1], [-1, 0, 1]])
prewitt_kernel_y = np.array([[ 1, 1, 1], [0, 0, 0], [-1, -1, -1]])
prewitt_x = cv2.filter2D(image, -1, prewitt_kernel_x)
prewitt_y = cv2.filter2D(image, -1, prewitt_kernel_y)
prewitt_combined = cv2.addWeighted(prewitt_x, 0.5, prewitt_y, 0.5, 0)

# 5. Laplacian Filter
laplacian = cv2.Laplacian(image, cv2.CV_64F)

# Plotting all results
titles = ['Original', 'Mean Filter', 'Gaussian Filter', 'Sobel Filter', 'Prewitt Filter', 'Laplacian Filter']
images = [image, mean_filter, gaussian_filter, sobel_combined, prewitt_combined, laplacian]

plt.figure(figsize=(14, 8))
for i in range(6):
    plt.subplot(2, 3, i+1)
    plt.imshow(images[i], cmap='gray')
    plt.title(titles[i])
    plt.axis('off')

plt.tight_layout()
plt.show()

"""# New section"""

# Install OpenCV if not already installed
!pip install opencv-python

import cv2
import matplotlib.pyplot as plt

# Upload an image in Colab
from google.colab import files
uploaded = files.upload()

# Get the uploaded image file name
image_path = list(uploaded.keys())[0]

# Read the image
image = cv2.imread(image_path)

# Convert to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply Gaussian Blur
blurred = cv2.GaussianBlur(gray, (5, 5), 0)

# Perform Canny edge detection
edges = cv2.Canny(blurred, 100, 200)

# Display results using Matplotlib
plt.figure(figsize=(12, 6))

plt.subplot(1, 3, 1)
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title("Original Image")
plt.axis("off")

plt.subplot(1, 3, 2)
plt.imshow(gray, cmap='gray')
plt.title("Grayscale Image")
plt.axis("off")

plt.subplot(1, 3, 3)
plt.imshow(edges, cmap='gray')
plt.title("Canny Edges")
plt.axis("off")

plt.show()

# Install OpenCV in Colab
!pip install opencv-python

import cv2
import matplotlib.pyplot as plt
from google.colab import files

# Upload an image
uploaded = files.upload()
image_path = list(uploaded.keys())[0]

# Read the image
image = cv2.imread(image_path)

# Convert to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply Gaussian Blur
blurred = cv2.GaussianBlur(gray, (5, 5), 0)

# Perform Canny Edge Detection
edges = cv2.Canny(blurred, 100, 200)

# Apply Morphological Opening to clean edges
kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
opened_edges = cv2.morphologyEx(edges, cv2.MORPH_OPEN, kernel)

# Display results
plt.figure(figsize=(12, 6))

plt.subplot(1, 3, 1)
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title("Original Image")
plt.axis("off")

plt.subplot(1, 3, 2)
plt.imshow(edges, cmap='gray')
plt.title("Canny Edges")
plt.axis("off")

plt.subplot(1, 3, 3)
plt.imshow(opened_edges, cmap='gray')
plt.title("Canny + Opening")
plt.axis("off")

plt.show()

# Install OpenCV (if not already installed)
!pip install opencv-python

import cv2
import matplotlib.pyplot as plt
from google.colab import files

# Upload an image
uploaded = files.upload()
image_path = list(uploaded.keys())[0]

# Read the image
image = cv2.imread(image_path)

# Convert to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply Gaussian Blur
blurred = cv2.GaussianBlur(gray, (5, 5), 0)

# Perform Canny Edge Detection
edges = cv2.Canny(blurred, 100, 200)

# Apply Dilation to make edges thicker
kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
dilated_edges = cv2.dilate(edges, kernel, iterations=1)

# Display results
plt.figure(figsize=(12, 6))

plt.subplot(1, 3, 1)
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title("Original Image")
plt.axis("off")

plt.subplot(1, 3, 2)
plt.imshow(edges, cmap='gray')
plt.title("Canny Edges")
plt.axis("off")

plt.subplot(1, 3, 3)
plt.imshow(dilated_edges, cmap='gray')
plt.title("Canny + Dilation")
plt.axis("off")

plt.show()

# Install OpenCV in Colab
!pip install opencv-python

import cv2
import matplotlib.pyplot as plt
from google.colab import files

# Upload an image
uploaded = files.upload()
image_path = list(uploaded.keys())[0]

# Read the image
image = cv2.imread(image_path)

# Convert to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply Gaussian Blur (reduce noise)
blurred = cv2.GaussianBlur(gray, (5, 5), 0)

# Perform Canny Edge Detection
edges = cv2.Canny(blurred, 100, 200)

# Apply Morphological Closing to connect gaps
kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
closed_edges = cv2.morphologyEx(edges, cv2.MORPH_CLOSE, kernel)

# Display results
plt.figure(figsize=(12, 6))

plt.subplot(1, 3, 1)
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title("Original Image")
plt.axis("off")

plt.subplot(1, 3, 2)
plt.imshow(edges, cmap='gray')
plt.title("Canny Edges")
plt.axis("off")

plt.subplot(1, 3, 3)
plt.imshow(closed_edges, cmap='gray')
plt.title("Canny + Closing")
plt.axis("off")

plt.show()